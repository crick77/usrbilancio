/*
 * This file is generated by jOOQ.
 */
package it.usr.web.usrbilancio.domain.tables;


import it.usr.web.usrbilancio.domain.Keys;
import it.usr.web.usrbilancio.domain.Usrbilancio;
import it.usr.web.usrbilancio.domain.tables.Ordinativo.OrdinativoPath;
import it.usr.web.usrbilancio.domain.tables.OrdinativoAppoggio.OrdinativoAppoggioPath;
import it.usr.web.usrbilancio.domain.tables.Quietanza.QuietanzaPath;
import it.usr.web.usrbilancio.domain.tables.records.TipoDocumentoRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TipoDocumento extends TableImpl<TipoDocumentoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>usrbilancio.tipo_documento</code>
     */
    public static final TipoDocumento TIPO_DOCUMENTO = new TipoDocumento();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TipoDocumentoRecord> getRecordType() {
        return TipoDocumentoRecord.class;
    }

    /**
     * The column <code>usrbilancio.tipo_documento.id</code>.
     */
    public final TableField<TipoDocumentoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>usrbilancio.tipo_documento.descrizione</code>.
     */
    public final TableField<TipoDocumentoRecord, String> DESCRIZIONE = createField(DSL.name("descrizione"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>usrbilancio.tipo_documento.stampabile</code>.
     */
    public final TableField<TipoDocumentoRecord, Byte> STAMPABILE = createField(DSL.name("stampabile"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    private TipoDocumento(Name alias, Table<TipoDocumentoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TipoDocumento(Name alias, Table<TipoDocumentoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>usrbilancio.tipo_documento</code> table reference
     */
    public TipoDocumento(String alias) {
        this(DSL.name(alias), TIPO_DOCUMENTO);
    }

    /**
     * Create an aliased <code>usrbilancio.tipo_documento</code> table reference
     */
    public TipoDocumento(Name alias) {
        this(alias, TIPO_DOCUMENTO);
    }

    /**
     * Create a <code>usrbilancio.tipo_documento</code> table reference
     */
    public TipoDocumento() {
        this(DSL.name("tipo_documento"), null);
    }

    public <O extends Record> TipoDocumento(Table<O> path, ForeignKey<O, TipoDocumentoRecord> childPath, InverseForeignKey<O, TipoDocumentoRecord> parentPath) {
        super(path, childPath, parentPath, TIPO_DOCUMENTO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TipoDocumentoPath extends TipoDocumento implements Path<TipoDocumentoRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TipoDocumentoPath(Table<O> path, ForeignKey<O, TipoDocumentoRecord> childPath, InverseForeignKey<O, TipoDocumentoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TipoDocumentoPath(Name alias, Table<TipoDocumentoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TipoDocumentoPath as(String alias) {
            return new TipoDocumentoPath(DSL.name(alias), this);
        }

        @Override
        public TipoDocumentoPath as(Name alias) {
            return new TipoDocumentoPath(alias, this);
        }

        @Override
        public TipoDocumentoPath as(Table<?> alias) {
            return new TipoDocumentoPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Usrbilancio.USRBILANCIO;
    }

    @Override
    public Identity<TipoDocumentoRecord, Integer> getIdentity() {
        return (Identity<TipoDocumentoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TipoDocumentoRecord> getPrimaryKey() {
        return Keys.KEY_TIPO_DOCUMENTO_PRIMARY;
    }

    @Override
    public List<UniqueKey<TipoDocumentoRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TIPO_DOCUMENTO_DESCRIZIONE_UNIQUE);
    }

    private transient OrdinativoPath _ordinativo;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.ordinativo</code> table
     */
    public OrdinativoPath ordinativo() {
        if (_ordinativo == null)
            _ordinativo = new OrdinativoPath(this, null, Keys.FK_ORDINATIVO_TIPODOCUMENTO.getInverseKey());

        return _ordinativo;
    }

    private transient OrdinativoAppoggioPath _ordinativoAppoggio;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.ordinativo_appoggio</code> table
     */
    public OrdinativoAppoggioPath ordinativoAppoggio() {
        if (_ordinativoAppoggio == null)
            _ordinativoAppoggio = new OrdinativoAppoggioPath(this, null, Keys.FK_ORDINATIVOAPP_TIPODOCUMENTO.getInverseKey());

        return _ordinativoAppoggio;
    }

    private transient QuietanzaPath _quietanza;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.quietanza</code> table
     */
    public QuietanzaPath quietanza() {
        if (_quietanza == null)
            _quietanza = new QuietanzaPath(this, null, Keys.FK_QUIETANZA_TIPODOCUMENTO.getInverseKey());

        return _quietanza;
    }

    @Override
    public TipoDocumento as(String alias) {
        return new TipoDocumento(DSL.name(alias), this);
    }

    @Override
    public TipoDocumento as(Name alias) {
        return new TipoDocumento(alias, this);
    }

    @Override
    public TipoDocumento as(Table<?> alias) {
        return new TipoDocumento(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TipoDocumento rename(String name) {
        return new TipoDocumento(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TipoDocumento rename(Name name) {
        return new TipoDocumento(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TipoDocumento rename(Table<?> name) {
        return new TipoDocumento(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TipoDocumento where(Condition condition) {
        return new TipoDocumento(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TipoDocumento where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TipoDocumento where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TipoDocumento where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TipoDocumento where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TipoDocumento where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TipoDocumento where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TipoDocumento where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TipoDocumento whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TipoDocumento whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
