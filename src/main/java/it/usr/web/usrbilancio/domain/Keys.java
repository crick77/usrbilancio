/*
 * This file is generated by jOOQ.
 */
package it.usr.web.usrbilancio.domain;


import it.usr.web.usrbilancio.domain.tables.Allegato;
import it.usr.web.usrbilancio.domain.tables.AllegatoAppoggio;
import it.usr.web.usrbilancio.domain.tables.Capitolo;
import it.usr.web.usrbilancio.domain.tables.Codice;
import it.usr.web.usrbilancio.domain.tables.Competenza;
import it.usr.web.usrbilancio.domain.tables.LogOperazioni;
import it.usr.web.usrbilancio.domain.tables.MimeType;
import it.usr.web.usrbilancio.domain.tables.MovimentiVirtuali;
import it.usr.web.usrbilancio.domain.tables.Ordinativo;
import it.usr.web.usrbilancio.domain.tables.OrdinativoAppoggio;
import it.usr.web.usrbilancio.domain.tables.Parametri;
import it.usr.web.usrbilancio.domain.tables.Quietanza;
import it.usr.web.usrbilancio.domain.tables.RettificaIva;
import it.usr.web.usrbilancio.domain.tables.Richiesta;
import it.usr.web.usrbilancio.domain.tables.TipoDocumento;
import it.usr.web.usrbilancio.domain.tables.TipoRts;
import it.usr.web.usrbilancio.domain.tables.Utente;
import it.usr.web.usrbilancio.domain.tables.records.AllegatoAppoggioRecord;
import it.usr.web.usrbilancio.domain.tables.records.AllegatoRecord;
import it.usr.web.usrbilancio.domain.tables.records.CapitoloRecord;
import it.usr.web.usrbilancio.domain.tables.records.CodiceRecord;
import it.usr.web.usrbilancio.domain.tables.records.CompetenzaRecord;
import it.usr.web.usrbilancio.domain.tables.records.LogOperazioniRecord;
import it.usr.web.usrbilancio.domain.tables.records.MimeTypeRecord;
import it.usr.web.usrbilancio.domain.tables.records.MovimentiVirtualiRecord;
import it.usr.web.usrbilancio.domain.tables.records.OrdinativoAppoggioRecord;
import it.usr.web.usrbilancio.domain.tables.records.OrdinativoRecord;
import it.usr.web.usrbilancio.domain.tables.records.ParametriRecord;
import it.usr.web.usrbilancio.domain.tables.records.QuietanzaRecord;
import it.usr.web.usrbilancio.domain.tables.records.RettificaIvaRecord;
import it.usr.web.usrbilancio.domain.tables.records.RichiestaRecord;
import it.usr.web.usrbilancio.domain.tables.records.TipoDocumentoRecord;
import it.usr.web.usrbilancio.domain.tables.records.TipoRtsRecord;
import it.usr.web.usrbilancio.domain.tables.records.UtenteRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * usrbilancio.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AllegatoRecord> KEY_ALLEGATO_PRIMARY = Internal.createUniqueKey(Allegato.ALLEGATO, DSL.name("KEY_allegato_PRIMARY"), new TableField[] { Allegato.ALLEGATO.ID }, true);
    public static final UniqueKey<AllegatoAppoggioRecord> KEY_ALLEGATO_APPOGGIO_PRIMARY = Internal.createUniqueKey(AllegatoAppoggio.ALLEGATO_APPOGGIO, DSL.name("KEY_allegato_appoggio_PRIMARY"), new TableField[] { AllegatoAppoggio.ALLEGATO_APPOGGIO.ID }, true);
    public static final UniqueKey<CapitoloRecord> KEY_CAPITOLO_PRIMARY = Internal.createUniqueKey(Capitolo.CAPITOLO, DSL.name("KEY_capitolo_PRIMARY"), new TableField[] { Capitolo.CAPITOLO.ID }, true);
    public static final UniqueKey<CodiceRecord> KEY_CODICE_CODICE_CXX_UNQ = Internal.createUniqueKey(Codice.CODICE, DSL.name("KEY_codice_codice_cxx_unq"), new TableField[] { Codice.CODICE.C01, Codice.CODICE.C02, Codice.CODICE.C04, Codice.CODICE.C03, Codice.CODICE.C05, Codice.CODICE.CODICE_ }, true);
    public static final UniqueKey<CodiceRecord> KEY_CODICE_PRIMARY = Internal.createUniqueKey(Codice.CODICE, DSL.name("KEY_codice_PRIMARY"), new TableField[] { Codice.CODICE.ID }, true);
    public static final UniqueKey<CompetenzaRecord> KEY_COMPETENZA_PRIMARY = Internal.createUniqueKey(Competenza.COMPETENZA, DSL.name("KEY_competenza_PRIMARY"), new TableField[] { Competenza.COMPETENZA.ID }, true);
    public static final UniqueKey<CompetenzaRecord> KEY_COMPETENZA_UQ_ANNOCAPITOLO = Internal.createUniqueKey(Competenza.COMPETENZA, DSL.name("KEY_competenza_uq_annocapitolo"), new TableField[] { Competenza.COMPETENZA.ID_CAPITOLO, Competenza.COMPETENZA.ANNO }, true);
    public static final UniqueKey<LogOperazioniRecord> KEY_LOG_OPERAZIONI_PRIMARY = Internal.createUniqueKey(LogOperazioni.LOG_OPERAZIONI, DSL.name("KEY_log_operazioni_PRIMARY"), new TableField[] { LogOperazioni.LOG_OPERAZIONI.ID }, true);
    public static final UniqueKey<MimeTypeRecord> KEY_MIME_TYPE_PK_MIME_TYPE = Internal.createUniqueKey(MimeType.MIME_TYPE, DSL.name("KEY_mime_type_pk_mime_type"), new TableField[] { MimeType.MIME_TYPE.EXTENSION, MimeType.MIME_TYPE.MIME }, true);
    public static final UniqueKey<MovimentiVirtualiRecord> KEY_MOVIMENTI_VIRTUALI_PRIMARY = Internal.createUniqueKey(MovimentiVirtuali.MOVIMENTI_VIRTUALI, DSL.name("KEY_movimenti_virtuali_PRIMARY"), new TableField[] { MovimentiVirtuali.MOVIMENTI_VIRTUALI.ID }, true);
    public static final UniqueKey<OrdinativoRecord> KEY_ORDINATIVO_PRIMARY = Internal.createUniqueKey(Ordinativo.ORDINATIVO, DSL.name("KEY_ordinativo_PRIMARY"), new TableField[] { Ordinativo.ORDINATIVO.ID }, true);
    public static final UniqueKey<OrdinativoAppoggioRecord> KEY_ORDINATIVO_APPOGGIO_PRIMARY = Internal.createUniqueKey(OrdinativoAppoggio.ORDINATIVO_APPOGGIO, DSL.name("KEY_ordinativo_appoggio_PRIMARY"), new TableField[] { OrdinativoAppoggio.ORDINATIVO_APPOGGIO.ID }, true);
    public static final UniqueKey<ParametriRecord> KEY_PARAMETRI_PRIMARY = Internal.createUniqueKey(Parametri.PARAMETRI, DSL.name("KEY_parametri_PRIMARY"), new TableField[] { Parametri.PARAMETRI.PARAMETRO }, true);
    public static final UniqueKey<QuietanzaRecord> KEY_QUIETANZA_PRIMARY = Internal.createUniqueKey(Quietanza.QUIETANZA, DSL.name("KEY_quietanza_PRIMARY"), new TableField[] { Quietanza.QUIETANZA.ID }, true);
    public static final UniqueKey<RettificaIvaRecord> KEY_RETTIFICA_IVA_PRIMARY = Internal.createUniqueKey(RettificaIva.RETTIFICA_IVA, DSL.name("KEY_rettifica_iva_PRIMARY"), new TableField[] { RettificaIva.RETTIFICA_IVA.ANNO }, true);
    public static final UniqueKey<RichiestaRecord> KEY_RICHIESTA_PRIMARY = Internal.createUniqueKey(Richiesta.RICHIESTA, DSL.name("KEY_richiesta_PRIMARY"), new TableField[] { Richiesta.RICHIESTA.ID }, true);
    public static final UniqueKey<TipoDocumentoRecord> KEY_TIPO_DOCUMENTO_DESCRIZIONE_UNIQUE = Internal.createUniqueKey(TipoDocumento.TIPO_DOCUMENTO, DSL.name("KEY_tipo_documento_descrizione_UNIQUE"), new TableField[] { TipoDocumento.TIPO_DOCUMENTO.DESCRIZIONE }, true);
    public static final UniqueKey<TipoDocumentoRecord> KEY_TIPO_DOCUMENTO_PRIMARY = Internal.createUniqueKey(TipoDocumento.TIPO_DOCUMENTO, DSL.name("KEY_tipo_documento_PRIMARY"), new TableField[] { TipoDocumento.TIPO_DOCUMENTO.ID }, true);
    public static final UniqueKey<TipoRtsRecord> KEY_TIPO_RTS_DESCRIZIONE_UNIQUE = Internal.createUniqueKey(TipoRts.TIPO_RTS, DSL.name("KEY_tipo_rts_descrizione_UNIQUE"), new TableField[] { TipoRts.TIPO_RTS.CODICE }, true);
    public static final UniqueKey<TipoRtsRecord> KEY_TIPO_RTS_PRIMARY = Internal.createUniqueKey(TipoRts.TIPO_RTS, DSL.name("KEY_tipo_rts_PRIMARY"), new TableField[] { TipoRts.TIPO_RTS.ID }, true);
    public static final UniqueKey<UtenteRecord> KEY_UTENTE_PRIMARY = Internal.createUniqueKey(Utente.UTENTE, DSL.name("KEY_utente_PRIMARY"), new TableField[] { Utente.UTENTE.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AllegatoRecord, OrdinativoRecord> FK_ALLEGATO_ORDINATIVO = Internal.createForeignKey(Allegato.ALLEGATO, DSL.name("fk_allegato_ordinativo"), new TableField[] { Allegato.ALLEGATO.ID_ORDINATIVO }, Keys.KEY_ORDINATIVO_PRIMARY, new TableField[] { Ordinativo.ORDINATIVO.ID }, true);
    public static final ForeignKey<AllegatoAppoggioRecord, OrdinativoAppoggioRecord> FK_ALLEGATOAPP_ORDINATIVOAPP_IDX = Internal.createForeignKey(AllegatoAppoggio.ALLEGATO_APPOGGIO, DSL.name("fk_allegatoapp_ordinativoapp_idx"), new TableField[] { AllegatoAppoggio.ALLEGATO_APPOGGIO.ID_ORDINATIVO_APPOGGIO }, Keys.KEY_ORDINATIVO_APPOGGIO_PRIMARY, new TableField[] { OrdinativoAppoggio.ORDINATIVO_APPOGGIO.ID }, true);
    public static final ForeignKey<CompetenzaRecord, CapitoloRecord> FK_ANNUALITA_CAPITOLO = Internal.createForeignKey(Competenza.COMPETENZA, DSL.name("fk_annualita_capitolo"), new TableField[] { Competenza.COMPETENZA.ID_CAPITOLO }, Keys.KEY_CAPITOLO_PRIMARY, new TableField[] { Capitolo.CAPITOLO.ID }, true);
    public static final ForeignKey<MovimentiVirtualiRecord, CodiceRecord> FK_PREVENTRATA_CODICE = Internal.createForeignKey(MovimentiVirtuali.MOVIMENTI_VIRTUALI, DSL.name("fk_preventrata_codice"), new TableField[] { MovimentiVirtuali.MOVIMENTI_VIRTUALI.ID_CODICE }, Keys.KEY_CODICE_PRIMARY, new TableField[] { Codice.CODICE.ID }, true);
    public static final ForeignKey<MovimentiVirtualiRecord, CompetenzaRecord> FK_PREVENTRATA_COMPETENZA = Internal.createForeignKey(MovimentiVirtuali.MOVIMENTI_VIRTUALI, DSL.name("fk_preventrata_competenza"), new TableField[] { MovimentiVirtuali.MOVIMENTI_VIRTUALI.ID_COMPETENZA }, Keys.KEY_COMPETENZA_PRIMARY, new TableField[] { Competenza.COMPETENZA.ID }, true);
    public static final ForeignKey<OrdinativoRecord, CodiceRecord> FK_ORDINATIVO_CODICE = Internal.createForeignKey(Ordinativo.ORDINATIVO, DSL.name("fk_ordinativo_codice"), new TableField[] { Ordinativo.ORDINATIVO.ID_CODICE }, Keys.KEY_CODICE_PRIMARY, new TableField[] { Codice.CODICE.ID }, true);
    public static final ForeignKey<OrdinativoRecord, CompetenzaRecord> FK_ORDINATIVO_COMPETENZA = Internal.createForeignKey(Ordinativo.ORDINATIVO, DSL.name("fk_ordinativo_competenza"), new TableField[] { Ordinativo.ORDINATIVO.ID_COMPETENZA }, Keys.KEY_COMPETENZA_PRIMARY, new TableField[] { Competenza.COMPETENZA.ID }, true);
    public static final ForeignKey<OrdinativoRecord, TipoDocumentoRecord> FK_ORDINATIVO_TIPODOCUMENTO = Internal.createForeignKey(Ordinativo.ORDINATIVO, DSL.name("fk_ordinativo_tipodocumento"), new TableField[] { Ordinativo.ORDINATIVO.ID_TIPO_DOCUMENTO }, Keys.KEY_TIPO_DOCUMENTO_PRIMARY, new TableField[] { TipoDocumento.TIPO_DOCUMENTO.ID }, true);
    public static final ForeignKey<OrdinativoRecord, TipoRtsRecord> FK_ORDINATIVO_TIPORTS = Internal.createForeignKey(Ordinativo.ORDINATIVO, DSL.name("fk_ordinativo_tiports"), new TableField[] { Ordinativo.ORDINATIVO.ID_TIPO_RTS }, Keys.KEY_TIPO_RTS_PRIMARY, new TableField[] { TipoRts.TIPO_RTS.ID }, true);
    public static final ForeignKey<OrdinativoRecord, OrdinativoRecord> FK_SELF_ORDINATIVO_IVA = Internal.createForeignKey(Ordinativo.ORDINATIVO, DSL.name("fk_self_ordinativo_iva"), new TableField[] { Ordinativo.ORDINATIVO.ORDINATIVO_IVA }, Keys.KEY_ORDINATIVO_PRIMARY, new TableField[] { Ordinativo.ORDINATIVO.ID }, true);
    public static final ForeignKey<OrdinativoRecord, OrdinativoRecord> FK_SELF_ORDINATIVO_RITENUTA = Internal.createForeignKey(Ordinativo.ORDINATIVO, DSL.name("fk_self_ordinativo_ritenuta"), new TableField[] { Ordinativo.ORDINATIVO.ORDINATIVO_RITENUTA }, Keys.KEY_ORDINATIVO_PRIMARY, new TableField[] { Ordinativo.ORDINATIVO.ID }, true);
    public static final ForeignKey<OrdinativoAppoggioRecord, CodiceRecord> FK_ORDINATIVOAPP_CODICE = Internal.createForeignKey(OrdinativoAppoggio.ORDINATIVO_APPOGGIO, DSL.name("fk_ordinativoapp_codice"), new TableField[] { OrdinativoAppoggio.ORDINATIVO_APPOGGIO.ID_CODICE }, Keys.KEY_CODICE_PRIMARY, new TableField[] { Codice.CODICE.ID }, true);
    public static final ForeignKey<OrdinativoAppoggioRecord, CompetenzaRecord> FK_ORDINATIVOAPP_COMPETENZA = Internal.createForeignKey(OrdinativoAppoggio.ORDINATIVO_APPOGGIO, DSL.name("fk_ordinativoapp_competenza"), new TableField[] { OrdinativoAppoggio.ORDINATIVO_APPOGGIO.ID_COMPETENZA }, Keys.KEY_COMPETENZA_PRIMARY, new TableField[] { Competenza.COMPETENZA.ID }, true);
    public static final ForeignKey<OrdinativoAppoggioRecord, TipoDocumentoRecord> FK_ORDINATIVOAPP_TIPODOCUMENTO = Internal.createForeignKey(OrdinativoAppoggio.ORDINATIVO_APPOGGIO, DSL.name("fk_ordinativoapp_tipodocumento"), new TableField[] { OrdinativoAppoggio.ORDINATIVO_APPOGGIO.ID_TIPO_DOCUMENTO }, Keys.KEY_TIPO_DOCUMENTO_PRIMARY, new TableField[] { TipoDocumento.TIPO_DOCUMENTO.ID }, true);
    public static final ForeignKey<OrdinativoAppoggioRecord, TipoRtsRecord> FK_ORDINATIVOAPP_TIPORTS = Internal.createForeignKey(OrdinativoAppoggio.ORDINATIVO_APPOGGIO, DSL.name("fk_ordinativoapp_tiports"), new TableField[] { OrdinativoAppoggio.ORDINATIVO_APPOGGIO.ID_TIPO_RTS }, Keys.KEY_TIPO_RTS_PRIMARY, new TableField[] { TipoRts.TIPO_RTS.ID }, true);
    public static final ForeignKey<QuietanzaRecord, CodiceRecord> FK_QUIETANZA_CODICE = Internal.createForeignKey(Quietanza.QUIETANZA, DSL.name("fk_quietanza_codice"), new TableField[] { Quietanza.QUIETANZA.ID_CODICE }, Keys.KEY_CODICE_PRIMARY, new TableField[] { Codice.CODICE.ID }, true);
    public static final ForeignKey<QuietanzaRecord, CompetenzaRecord> FK_QUIETANZA_COMPETENZA = Internal.createForeignKey(Quietanza.QUIETANZA, DSL.name("fk_quietanza_competenza"), new TableField[] { Quietanza.QUIETANZA.ID_COMPETENZA }, Keys.KEY_COMPETENZA_PRIMARY, new TableField[] { Competenza.COMPETENZA.ID }, true);
    public static final ForeignKey<QuietanzaRecord, TipoDocumentoRecord> FK_QUIETANZA_TIPODOCUMENTO = Internal.createForeignKey(Quietanza.QUIETANZA, DSL.name("fk_quietanza_tipodocumento"), new TableField[] { Quietanza.QUIETANZA.ID_TIPO_DOCUMENTO }, Keys.KEY_TIPO_DOCUMENTO_PRIMARY, new TableField[] { TipoDocumento.TIPO_DOCUMENTO.ID }, true);
    public static final ForeignKey<QuietanzaRecord, TipoRtsRecord> FK_QUIETANZA_TIPORTS = Internal.createForeignKey(Quietanza.QUIETANZA, DSL.name("fk_quietanza_tiports"), new TableField[] { Quietanza.QUIETANZA.ID_TIPO_RTS }, Keys.KEY_TIPO_RTS_PRIMARY, new TableField[] { TipoRts.TIPO_RTS.ID }, true);
    public static final ForeignKey<RichiestaRecord, CompetenzaRecord> FK_RICHIESTA_COMPETENZA = Internal.createForeignKey(Richiesta.RICHIESTA, DSL.name("fk_richiesta_competenza"), new TableField[] { Richiesta.RICHIESTA.ID_COMPETENZA }, Keys.KEY_COMPETENZA_PRIMARY, new TableField[] { Competenza.COMPETENZA.ID }, true);
}
