/*
 * This file is generated by jOOQ.
 */
package it.usr.web.usrbilancio.domain.tables;


import it.usr.web.usrbilancio.domain.Keys;
import it.usr.web.usrbilancio.domain.Usrbilancio;
import it.usr.web.usrbilancio.domain.tables.records.MimeTypeRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MimeType extends TableImpl<MimeTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>usrbilancio.mime_type</code>
     */
    public static final MimeType MIME_TYPE = new MimeType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MimeTypeRecord> getRecordType() {
        return MimeTypeRecord.class;
    }

    /**
     * The column <code>usrbilancio.mime_type.extension</code>.
     */
    public final TableField<MimeTypeRecord, String> EXTENSION = createField(DSL.name("extension"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>usrbilancio.mime_type.mime</code>.
     */
    public final TableField<MimeTypeRecord, String> MIME = createField(DSL.name("mime"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>usrbilancio.mime_type.descrizione</code>.
     */
    public final TableField<MimeTypeRecord, String> DESCRIZIONE = createField(DSL.name("descrizione"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    private MimeType(Name alias, Table<MimeTypeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MimeType(Name alias, Table<MimeTypeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>usrbilancio.mime_type</code> table reference
     */
    public MimeType(String alias) {
        this(DSL.name(alias), MIME_TYPE);
    }

    /**
     * Create an aliased <code>usrbilancio.mime_type</code> table reference
     */
    public MimeType(Name alias) {
        this(alias, MIME_TYPE);
    }

    /**
     * Create a <code>usrbilancio.mime_type</code> table reference
     */
    public MimeType() {
        this(DSL.name("mime_type"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Usrbilancio.USRBILANCIO;
    }

    @Override
    public List<UniqueKey<MimeTypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MIME_TYPE_PK_MIME_TYPE);
    }

    @Override
    public MimeType as(String alias) {
        return new MimeType(DSL.name(alias), this);
    }

    @Override
    public MimeType as(Name alias) {
        return new MimeType(alias, this);
    }

    @Override
    public MimeType as(Table<?> alias) {
        return new MimeType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MimeType rename(String name) {
        return new MimeType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MimeType rename(Name name) {
        return new MimeType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MimeType rename(Table<?> name) {
        return new MimeType(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MimeType where(Condition condition) {
        return new MimeType(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MimeType where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MimeType where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MimeType where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MimeType where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MimeType where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MimeType where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MimeType where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MimeType whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MimeType whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
