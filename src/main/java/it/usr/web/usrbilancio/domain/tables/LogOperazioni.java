/*
 * This file is generated by jOOQ.
 */
package it.usr.web.usrbilancio.domain.tables;


import it.usr.web.usrbilancio.domain.Keys;
import it.usr.web.usrbilancio.domain.Usrbilancio;
import it.usr.web.usrbilancio.domain.tables.records.LogOperazioniRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LogOperazioni extends TableImpl<LogOperazioniRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>usrbilancio.log_operazioni</code>
     */
    public static final LogOperazioni LOG_OPERAZIONI = new LogOperazioni();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogOperazioniRecord> getRecordType() {
        return LogOperazioniRecord.class;
    }

    /**
     * The column <code>usrbilancio.log_operazioni.id</code>.
     */
    public final TableField<LogOperazioniRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>usrbilancio.log_operazioni.service</code>.
     */
    public final TableField<LogOperazioniRecord, String> SERVICE = createField(DSL.name("service"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>usrbilancio.log_operazioni.arg1</code>.
     */
    public final TableField<LogOperazioniRecord, String> ARG1 = createField(DSL.name("arg1"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>usrbilancio.log_operazioni.arg2</code>.
     */
    public final TableField<LogOperazioniRecord, String> ARG2 = createField(DSL.name("arg2"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>usrbilancio.log_operazioni.arg3</code>.
     */
    public final TableField<LogOperazioniRecord, String> ARG3 = createField(DSL.name("arg3"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>usrbilancio.log_operazioni.arg4</code>.
     */
    public final TableField<LogOperazioniRecord, String> ARG4 = createField(DSL.name("arg4"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>usrbilancio.log_operazioni.arg5</code>.
     */
    public final TableField<LogOperazioniRecord, String> ARG5 = createField(DSL.name("arg5"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>usrbilancio.log_operazioni.originale</code>.
     */
    public final TableField<LogOperazioniRecord, String> ORIGINALE = createField(DSL.name("originale"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>usrbilancio.log_operazioni.operatore</code>.
     */
    public final TableField<LogOperazioniRecord, String> OPERATORE = createField(DSL.name("operatore"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>usrbilancio.log_operazioni.data_ora</code>.
     */
    public final TableField<LogOperazioniRecord, LocalDateTime> DATA_ORA = createField(DSL.name("data_ora"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private LogOperazioni(Name alias, Table<LogOperazioniRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LogOperazioni(Name alias, Table<LogOperazioniRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>usrbilancio.log_operazioni</code> table reference
     */
    public LogOperazioni(String alias) {
        this(DSL.name(alias), LOG_OPERAZIONI);
    }

    /**
     * Create an aliased <code>usrbilancio.log_operazioni</code> table reference
     */
    public LogOperazioni(Name alias) {
        this(alias, LOG_OPERAZIONI);
    }

    /**
     * Create a <code>usrbilancio.log_operazioni</code> table reference
     */
    public LogOperazioni() {
        this(DSL.name("log_operazioni"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Usrbilancio.USRBILANCIO;
    }

    @Override
    public Identity<LogOperazioniRecord, Integer> getIdentity() {
        return (Identity<LogOperazioniRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LogOperazioniRecord> getPrimaryKey() {
        return Keys.KEY_LOG_OPERAZIONI_PRIMARY;
    }

    @Override
    public LogOperazioni as(String alias) {
        return new LogOperazioni(DSL.name(alias), this);
    }

    @Override
    public LogOperazioni as(Name alias) {
        return new LogOperazioni(alias, this);
    }

    @Override
    public LogOperazioni as(Table<?> alias) {
        return new LogOperazioni(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogOperazioni rename(String name) {
        return new LogOperazioni(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LogOperazioni rename(Name name) {
        return new LogOperazioni(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LogOperazioni rename(Table<?> name) {
        return new LogOperazioni(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LogOperazioni where(Condition condition) {
        return new LogOperazioni(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LogOperazioni where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LogOperazioni where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LogOperazioni where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LogOperazioni where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LogOperazioni where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LogOperazioni where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LogOperazioni where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LogOperazioni whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LogOperazioni whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
