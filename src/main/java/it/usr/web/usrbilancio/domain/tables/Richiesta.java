/*
 * This file is generated by jOOQ.
 */
package it.usr.web.usrbilancio.domain.tables;


import it.usr.web.usrbilancio.domain.Indexes;
import it.usr.web.usrbilancio.domain.Keys;
import it.usr.web.usrbilancio.domain.Usrbilancio;
import it.usr.web.usrbilancio.domain.tables.Competenza.CompetenzaPath;
import it.usr.web.usrbilancio.domain.tables.records.RichiestaRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Richiesta extends TableImpl<RichiestaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>usrbilancio.richiesta</code>
     */
    public static final Richiesta RICHIESTA = new Richiesta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RichiestaRecord> getRecordType() {
        return RichiestaRecord.class;
    }

    /**
     * The column <code>usrbilancio.richiesta.id</code>.
     */
    public final TableField<RichiestaRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>usrbilancio.richiesta.id_competenza</code>.
     */
    public final TableField<RichiestaRecord, Integer> ID_COMPETENZA = createField(DSL.name("id_competenza"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>usrbilancio.richiesta.numero_protocollo</code>.
     */
    public final TableField<RichiestaRecord, String> NUMERO_PROTOCOLLO = createField(DSL.name("numero_protocollo"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>usrbilancio.richiesta.data_protocollo</code>.
     */
    public final TableField<RichiestaRecord, LocalDate> DATA_PROTOCOLLO = createField(DSL.name("data_protocollo"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>usrbilancio.richiesta.ingresso</code>.
     */
    public final TableField<RichiestaRecord, Byte> INGRESSO = createField(DSL.name("ingresso"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>usrbilancio.richiesta.importo</code>.
     */
    public final TableField<RichiestaRecord, BigDecimal> IMPORTO = createField(DSL.name("importo"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>usrbilancio.richiesta.note</code>.
     */
    public final TableField<RichiestaRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>usrbilancio.richiesta.nomefile</code>.
     */
    public final TableField<RichiestaRecord, String> NOMEFILE = createField(DSL.name("nomefile"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>usrbilancio.richiesta.nomefile_locale</code>.
     */
    public final TableField<RichiestaRecord, String> NOMEFILE_LOCALE = createField(DSL.name("nomefile_locale"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>usrbilancio.richiesta.versione</code>.
     */
    public final TableField<RichiestaRecord, Long> VERSIONE = createField(DSL.name("versione"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    private Richiesta(Name alias, Table<RichiestaRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Richiesta(Name alias, Table<RichiestaRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>usrbilancio.richiesta</code> table reference
     */
    public Richiesta(String alias) {
        this(DSL.name(alias), RICHIESTA);
    }

    /**
     * Create an aliased <code>usrbilancio.richiesta</code> table reference
     */
    public Richiesta(Name alias) {
        this(alias, RICHIESTA);
    }

    /**
     * Create a <code>usrbilancio.richiesta</code> table reference
     */
    public Richiesta() {
        this(DSL.name("richiesta"), null);
    }

    public <O extends Record> Richiesta(Table<O> path, ForeignKey<O, RichiestaRecord> childPath, InverseForeignKey<O, RichiestaRecord> parentPath) {
        super(path, childPath, parentPath, RICHIESTA);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RichiestaPath extends Richiesta implements Path<RichiestaRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RichiestaPath(Table<O> path, ForeignKey<O, RichiestaRecord> childPath, InverseForeignKey<O, RichiestaRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RichiestaPath(Name alias, Table<RichiestaRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RichiestaPath as(String alias) {
            return new RichiestaPath(DSL.name(alias), this);
        }

        @Override
        public RichiestaPath as(Name alias) {
            return new RichiestaPath(alias, this);
        }

        @Override
        public RichiestaPath as(Table<?> alias) {
            return new RichiestaPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Usrbilancio.USRBILANCIO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.RICHIESTA_FK_RICHIESTA_COMPETENZA_IDX);
    }

    @Override
    public Identity<RichiestaRecord, Integer> getIdentity() {
        return (Identity<RichiestaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RichiestaRecord> getPrimaryKey() {
        return Keys.KEY_RICHIESTA_PRIMARY;
    }

    @Override
    public List<ForeignKey<RichiestaRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_RICHIESTA_COMPETENZA);
    }

    private transient CompetenzaPath _competenza;

    /**
     * Get the implicit join path to the <code>usrbilancio.competenza</code>
     * table.
     */
    public CompetenzaPath competenza() {
        if (_competenza == null)
            _competenza = new CompetenzaPath(this, Keys.FK_RICHIESTA_COMPETENZA, null);

        return _competenza;
    }

    @Override
    public Richiesta as(String alias) {
        return new Richiesta(DSL.name(alias), this);
    }

    @Override
    public Richiesta as(Name alias) {
        return new Richiesta(alias, this);
    }

    @Override
    public Richiesta as(Table<?> alias) {
        return new Richiesta(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Richiesta rename(String name) {
        return new Richiesta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Richiesta rename(Name name) {
        return new Richiesta(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Richiesta rename(Table<?> name) {
        return new Richiesta(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Richiesta where(Condition condition) {
        return new Richiesta(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Richiesta where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Richiesta where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Richiesta where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Richiesta where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Richiesta where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Richiesta where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Richiesta where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Richiesta whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Richiesta whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
