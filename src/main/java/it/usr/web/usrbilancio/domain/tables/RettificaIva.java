/*
 * This file is generated by jOOQ.
 */
package it.usr.web.usrbilancio.domain.tables;


import it.usr.web.usrbilancio.domain.Keys;
import it.usr.web.usrbilancio.domain.Usrbilancio;
import it.usr.web.usrbilancio.domain.tables.records.RettificaIvaRecord;

import java.math.BigDecimal;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RettificaIva extends TableImpl<RettificaIvaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>usrbilancio.rettifica_iva</code>
     */
    public static final RettificaIva RETTIFICA_IVA = new RettificaIva();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RettificaIvaRecord> getRecordType() {
        return RettificaIvaRecord.class;
    }

    /**
     * The column <code>usrbilancio.rettifica_iva.anno</code>.
     */
    public final TableField<RettificaIvaRecord, Integer> ANNO = createField(DSL.name("anno"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>usrbilancio.rettifica_iva.iva_anagrafica</code>.
     */
    public final TableField<RettificaIvaRecord, BigDecimal> IVA_ANAGRAFICA = createField(DSL.name("iva_anagrafica"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>usrbilancio.rettifica_iva.iva_pagata</code>.
     */
    public final TableField<RettificaIvaRecord, BigDecimal> IVA_PAGATA = createField(DSL.name("iva_pagata"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    private RettificaIva(Name alias, Table<RettificaIvaRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RettificaIva(Name alias, Table<RettificaIvaRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>usrbilancio.rettifica_iva</code> table reference
     */
    public RettificaIva(String alias) {
        this(DSL.name(alias), RETTIFICA_IVA);
    }

    /**
     * Create an aliased <code>usrbilancio.rettifica_iva</code> table reference
     */
    public RettificaIva(Name alias) {
        this(alias, RETTIFICA_IVA);
    }

    /**
     * Create a <code>usrbilancio.rettifica_iva</code> table reference
     */
    public RettificaIva() {
        this(DSL.name("rettifica_iva"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Usrbilancio.USRBILANCIO;
    }

    @Override
    public UniqueKey<RettificaIvaRecord> getPrimaryKey() {
        return Keys.KEY_RETTIFICA_IVA_PRIMARY;
    }

    @Override
    public RettificaIva as(String alias) {
        return new RettificaIva(DSL.name(alias), this);
    }

    @Override
    public RettificaIva as(Name alias) {
        return new RettificaIva(alias, this);
    }

    @Override
    public RettificaIva as(Table<?> alias) {
        return new RettificaIva(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RettificaIva rename(String name) {
        return new RettificaIva(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RettificaIva rename(Name name) {
        return new RettificaIva(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RettificaIva rename(Table<?> name) {
        return new RettificaIva(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RettificaIva where(Condition condition) {
        return new RettificaIva(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RettificaIva where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RettificaIva where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RettificaIva where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RettificaIva where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RettificaIva where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RettificaIva where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RettificaIva where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RettificaIva whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RettificaIva whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
