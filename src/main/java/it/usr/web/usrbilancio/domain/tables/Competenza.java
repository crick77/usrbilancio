/*
 * This file is generated by jOOQ.
 */
package it.usr.web.usrbilancio.domain.tables;


import it.usr.web.usrbilancio.domain.Indexes;
import it.usr.web.usrbilancio.domain.Keys;
import it.usr.web.usrbilancio.domain.Usrbilancio;
import it.usr.web.usrbilancio.domain.tables.Capitolo.CapitoloPath;
import it.usr.web.usrbilancio.domain.tables.MovimentiVirtuali.MovimentiVirtualiPath;
import it.usr.web.usrbilancio.domain.tables.Ordinativo.OrdinativoPath;
import it.usr.web.usrbilancio.domain.tables.OrdinativoAppoggio.OrdinativoAppoggioPath;
import it.usr.web.usrbilancio.domain.tables.Quietanza.QuietanzaPath;
import it.usr.web.usrbilancio.domain.tables.Richiesta.RichiestaPath;
import it.usr.web.usrbilancio.domain.tables.records.CompetenzaRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 *     
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Competenza extends TableImpl<CompetenzaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>usrbilancio.competenza</code>
     */
    public static final Competenza COMPETENZA = new Competenza();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompetenzaRecord> getRecordType() {
        return CompetenzaRecord.class;
    }

    /**
     * The column <code>usrbilancio.competenza.id</code>.
     */
    public final TableField<CompetenzaRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>usrbilancio.competenza.id_capitolo</code>.
     */
    public final TableField<CompetenzaRecord, Integer> ID_CAPITOLO = createField(DSL.name("id_capitolo"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>usrbilancio.competenza.anno</code>.
     */
    public final TableField<CompetenzaRecord, Integer> ANNO = createField(DSL.name("anno"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>usrbilancio.competenza.chiuso</code>.
     */
    public final TableField<CompetenzaRecord, Byte> CHIUSO = createField(DSL.name("chiuso"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>usrbilancio.competenza.stanziamento</code>.
     */
    public final TableField<CompetenzaRecord, BigDecimal> STANZIAMENTO = createField(DSL.name("stanziamento"), SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>usrbilancio.competenza.note</code>.
     */
    public final TableField<CompetenzaRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>usrbilancio.competenza.versione</code>.
     */
    public final TableField<CompetenzaRecord, Long> VERSIONE = createField(DSL.name("versione"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    private Competenza(Name alias, Table<CompetenzaRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Competenza(Name alias, Table<CompetenzaRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>usrbilancio.competenza</code> table reference
     */
    public Competenza(String alias) {
        this(DSL.name(alias), COMPETENZA);
    }

    /**
     * Create an aliased <code>usrbilancio.competenza</code> table reference
     */
    public Competenza(Name alias) {
        this(alias, COMPETENZA);
    }

    /**
     * Create a <code>usrbilancio.competenza</code> table reference
     */
    public Competenza() {
        this(DSL.name("competenza"), null);
    }

    public <O extends Record> Competenza(Table<O> path, ForeignKey<O, CompetenzaRecord> childPath, InverseForeignKey<O, CompetenzaRecord> parentPath) {
        super(path, childPath, parentPath, COMPETENZA);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CompetenzaPath extends Competenza implements Path<CompetenzaRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CompetenzaPath(Table<O> path, ForeignKey<O, CompetenzaRecord> childPath, InverseForeignKey<O, CompetenzaRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CompetenzaPath(Name alias, Table<CompetenzaRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CompetenzaPath as(String alias) {
            return new CompetenzaPath(DSL.name(alias), this);
        }

        @Override
        public CompetenzaPath as(Name alias) {
            return new CompetenzaPath(alias, this);
        }

        @Override
        public CompetenzaPath as(Table<?> alias) {
            return new CompetenzaPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Usrbilancio.USRBILANCIO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.COMPETENZA_FK_ANNUALITA_CAPITOLO_IDX);
    }

    @Override
    public Identity<CompetenzaRecord, Integer> getIdentity() {
        return (Identity<CompetenzaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CompetenzaRecord> getPrimaryKey() {
        return Keys.KEY_COMPETENZA_PRIMARY;
    }

    @Override
    public List<UniqueKey<CompetenzaRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_COMPETENZA_UQ_ANNOCAPITOLO);
    }

    @Override
    public List<ForeignKey<CompetenzaRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ANNUALITA_CAPITOLO);
    }

    private transient CapitoloPath _capitolo;

    /**
     * Get the implicit join path to the <code>usrbilancio.capitolo</code>
     * table.
     */
    public CapitoloPath capitolo() {
        if (_capitolo == null)
            _capitolo = new CapitoloPath(this, Keys.FK_ANNUALITA_CAPITOLO, null);

        return _capitolo;
    }

    private transient OrdinativoPath _ordinativo;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.ordinativo</code> table
     */
    public OrdinativoPath ordinativo() {
        if (_ordinativo == null)
            _ordinativo = new OrdinativoPath(this, null, Keys.FK_ORDINATIVO_COMPETENZA.getInverseKey());

        return _ordinativo;
    }

    private transient OrdinativoAppoggioPath _ordinativoAppoggio;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.ordinativo_appoggio</code> table
     */
    public OrdinativoAppoggioPath ordinativoAppoggio() {
        if (_ordinativoAppoggio == null)
            _ordinativoAppoggio = new OrdinativoAppoggioPath(this, null, Keys.FK_ORDINATIVOAPP_COMPETENZA.getInverseKey());

        return _ordinativoAppoggio;
    }

    private transient MovimentiVirtualiPath _movimentiVirtuali;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.movimenti_virtuali</code> table
     */
    public MovimentiVirtualiPath movimentiVirtuali() {
        if (_movimentiVirtuali == null)
            _movimentiVirtuali = new MovimentiVirtualiPath(this, null, Keys.FK_PREVENTRATA_COMPETENZA.getInverseKey());

        return _movimentiVirtuali;
    }

    private transient QuietanzaPath _quietanza;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.quietanza</code> table
     */
    public QuietanzaPath quietanza() {
        if (_quietanza == null)
            _quietanza = new QuietanzaPath(this, null, Keys.FK_QUIETANZA_COMPETENZA.getInverseKey());

        return _quietanza;
    }

    private transient RichiestaPath _richiesta;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.richiesta</code> table
     */
    public RichiestaPath richiesta() {
        if (_richiesta == null)
            _richiesta = new RichiestaPath(this, null, Keys.FK_RICHIESTA_COMPETENZA.getInverseKey());

        return _richiesta;
    }

    @Override
    public Competenza as(String alias) {
        return new Competenza(DSL.name(alias), this);
    }

    @Override
    public Competenza as(Name alias) {
        return new Competenza(alias, this);
    }

    @Override
    public Competenza as(Table<?> alias) {
        return new Competenza(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Competenza rename(String name) {
        return new Competenza(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Competenza rename(Name name) {
        return new Competenza(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Competenza rename(Table<?> name) {
        return new Competenza(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Competenza where(Condition condition) {
        return new Competenza(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Competenza where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Competenza where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Competenza where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Competenza where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Competenza where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Competenza where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Competenza where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Competenza whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Competenza whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
