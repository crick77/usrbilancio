/*
 * This file is generated by jOOQ.
 */
package it.usr.web.usrbilancio.domain.tables;


import it.usr.web.usrbilancio.domain.Keys;
import it.usr.web.usrbilancio.domain.Usrbilancio;
import it.usr.web.usrbilancio.domain.tables.Ordinativo.OrdinativoPath;
import it.usr.web.usrbilancio.domain.tables.OrdinativoAppoggio.OrdinativoAppoggioPath;
import it.usr.web.usrbilancio.domain.tables.Quietanza.QuietanzaPath;
import it.usr.web.usrbilancio.domain.tables.records.TipoRtsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TipoRts extends TableImpl<TipoRtsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>usrbilancio.tipo_rts</code>
     */
    public static final TipoRts TIPO_RTS = new TipoRts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TipoRtsRecord> getRecordType() {
        return TipoRtsRecord.class;
    }

    /**
     * The column <code>usrbilancio.tipo_rts.id</code>.
     */
    public final TableField<TipoRtsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>usrbilancio.tipo_rts.codice</code>.
     */
    public final TableField<TipoRtsRecord, String> CODICE = createField(DSL.name("codice"), SQLDataType.VARCHAR(4).nullable(false), this, "");

    /**
     * The column <code>usrbilancio.tipo_rts.descrizione</code>.
     */
    public final TableField<TipoRtsRecord, String> DESCRIZIONE = createField(DSL.name("descrizione"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private TipoRts(Name alias, Table<TipoRtsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TipoRts(Name alias, Table<TipoRtsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>usrbilancio.tipo_rts</code> table reference
     */
    public TipoRts(String alias) {
        this(DSL.name(alias), TIPO_RTS);
    }

    /**
     * Create an aliased <code>usrbilancio.tipo_rts</code> table reference
     */
    public TipoRts(Name alias) {
        this(alias, TIPO_RTS);
    }

    /**
     * Create a <code>usrbilancio.tipo_rts</code> table reference
     */
    public TipoRts() {
        this(DSL.name("tipo_rts"), null);
    }

    public <O extends Record> TipoRts(Table<O> path, ForeignKey<O, TipoRtsRecord> childPath, InverseForeignKey<O, TipoRtsRecord> parentPath) {
        super(path, childPath, parentPath, TIPO_RTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TipoRtsPath extends TipoRts implements Path<TipoRtsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TipoRtsPath(Table<O> path, ForeignKey<O, TipoRtsRecord> childPath, InverseForeignKey<O, TipoRtsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TipoRtsPath(Name alias, Table<TipoRtsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TipoRtsPath as(String alias) {
            return new TipoRtsPath(DSL.name(alias), this);
        }

        @Override
        public TipoRtsPath as(Name alias) {
            return new TipoRtsPath(alias, this);
        }

        @Override
        public TipoRtsPath as(Table<?> alias) {
            return new TipoRtsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Usrbilancio.USRBILANCIO;
    }

    @Override
    public Identity<TipoRtsRecord, Integer> getIdentity() {
        return (Identity<TipoRtsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TipoRtsRecord> getPrimaryKey() {
        return Keys.KEY_TIPO_RTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<TipoRtsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TIPO_RTS_DESCRIZIONE_UNIQUE);
    }

    private transient OrdinativoPath _ordinativo;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.ordinativo</code> table
     */
    public OrdinativoPath ordinativo() {
        if (_ordinativo == null)
            _ordinativo = new OrdinativoPath(this, null, Keys.FK_ORDINATIVO_TIPORTS.getInverseKey());

        return _ordinativo;
    }

    private transient OrdinativoAppoggioPath _ordinativoAppoggio;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.ordinativo_appoggio</code> table
     */
    public OrdinativoAppoggioPath ordinativoAppoggio() {
        if (_ordinativoAppoggio == null)
            _ordinativoAppoggio = new OrdinativoAppoggioPath(this, null, Keys.FK_ORDINATIVOAPP_TIPORTS.getInverseKey());

        return _ordinativoAppoggio;
    }

    private transient QuietanzaPath _quietanza;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.quietanza</code> table
     */
    public QuietanzaPath quietanza() {
        if (_quietanza == null)
            _quietanza = new QuietanzaPath(this, null, Keys.FK_QUIETANZA_TIPORTS.getInverseKey());

        return _quietanza;
    }

    @Override
    public TipoRts as(String alias) {
        return new TipoRts(DSL.name(alias), this);
    }

    @Override
    public TipoRts as(Name alias) {
        return new TipoRts(alias, this);
    }

    @Override
    public TipoRts as(Table<?> alias) {
        return new TipoRts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TipoRts rename(String name) {
        return new TipoRts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TipoRts rename(Name name) {
        return new TipoRts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TipoRts rename(Table<?> name) {
        return new TipoRts(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TipoRts where(Condition condition) {
        return new TipoRts(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TipoRts where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TipoRts where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TipoRts where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TipoRts where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TipoRts where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TipoRts where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TipoRts where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TipoRts whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TipoRts whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
