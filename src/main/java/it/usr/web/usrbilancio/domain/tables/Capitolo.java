/*
 * This file is generated by jOOQ.
 */
package it.usr.web.usrbilancio.domain.tables;


import it.usr.web.usrbilancio.domain.Keys;
import it.usr.web.usrbilancio.domain.Usrbilancio;
import it.usr.web.usrbilancio.domain.tables.Competenza.CompetenzaPath;
import it.usr.web.usrbilancio.domain.tables.records.CapitoloRecord;

import java.math.BigDecimal;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Capitolo extends TableImpl<CapitoloRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>usrbilancio.capitolo</code>
     */
    public static final Capitolo CAPITOLO = new Capitolo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CapitoloRecord> getRecordType() {
        return CapitoloRecord.class;
    }

    /**
     * The column <code>usrbilancio.capitolo.id</code>.
     */
    public final TableField<CapitoloRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>usrbilancio.capitolo.descrizione</code>.
     */
    public final TableField<CapitoloRecord, String> DESCRIZIONE = createField(DSL.name("descrizione"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>usrbilancio.capitolo.nuovoanno</code>.
     */
    public final TableField<CapitoloRecord, Byte> NUOVOANNO = createField(DSL.name("nuovoanno"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>usrbilancio.capitolo.daconsolidare</code>.
     */
    public final TableField<CapitoloRecord, Byte> DACONSOLIDARE = createField(DSL.name("daconsolidare"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>usrbilancio.capitolo.stanziamento</code>.
     */
    public final TableField<CapitoloRecord, BigDecimal> STANZIAMENTO = createField(DSL.name("stanziamento"), SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>usrbilancio.capitolo.mostrasituazione</code>.
     */
    public final TableField<CapitoloRecord, Byte> MOSTRASITUAZIONE = createField(DSL.name("mostrasituazione"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>usrbilancio.capitolo.versione</code>.
     */
    public final TableField<CapitoloRecord, Long> VERSIONE = createField(DSL.name("versione"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    private Capitolo(Name alias, Table<CapitoloRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Capitolo(Name alias, Table<CapitoloRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>usrbilancio.capitolo</code> table reference
     */
    public Capitolo(String alias) {
        this(DSL.name(alias), CAPITOLO);
    }

    /**
     * Create an aliased <code>usrbilancio.capitolo</code> table reference
     */
    public Capitolo(Name alias) {
        this(alias, CAPITOLO);
    }

    /**
     * Create a <code>usrbilancio.capitolo</code> table reference
     */
    public Capitolo() {
        this(DSL.name("capitolo"), null);
    }

    public <O extends Record> Capitolo(Table<O> path, ForeignKey<O, CapitoloRecord> childPath, InverseForeignKey<O, CapitoloRecord> parentPath) {
        super(path, childPath, parentPath, CAPITOLO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CapitoloPath extends Capitolo implements Path<CapitoloRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CapitoloPath(Table<O> path, ForeignKey<O, CapitoloRecord> childPath, InverseForeignKey<O, CapitoloRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CapitoloPath(Name alias, Table<CapitoloRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CapitoloPath as(String alias) {
            return new CapitoloPath(DSL.name(alias), this);
        }

        @Override
        public CapitoloPath as(Name alias) {
            return new CapitoloPath(alias, this);
        }

        @Override
        public CapitoloPath as(Table<?> alias) {
            return new CapitoloPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Usrbilancio.USRBILANCIO;
    }

    @Override
    public Identity<CapitoloRecord, Integer> getIdentity() {
        return (Identity<CapitoloRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CapitoloRecord> getPrimaryKey() {
        return Keys.KEY_CAPITOLO_PRIMARY;
    }

    private transient CompetenzaPath _competenza;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.competenza</code> table
     */
    public CompetenzaPath competenza() {
        if (_competenza == null)
            _competenza = new CompetenzaPath(this, null, Keys.FK_ANNUALITA_CAPITOLO.getInverseKey());

        return _competenza;
    }

    @Override
    public Capitolo as(String alias) {
        return new Capitolo(DSL.name(alias), this);
    }

    @Override
    public Capitolo as(Name alias) {
        return new Capitolo(alias, this);
    }

    @Override
    public Capitolo as(Table<?> alias) {
        return new Capitolo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Capitolo rename(String name) {
        return new Capitolo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Capitolo rename(Name name) {
        return new Capitolo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Capitolo rename(Table<?> name) {
        return new Capitolo(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Capitolo where(Condition condition) {
        return new Capitolo(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Capitolo where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Capitolo where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Capitolo where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Capitolo where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Capitolo where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Capitolo where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Capitolo where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Capitolo whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Capitolo whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
