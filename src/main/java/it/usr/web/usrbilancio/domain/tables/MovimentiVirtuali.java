/*
 * This file is generated by jOOQ.
 */
package it.usr.web.usrbilancio.domain.tables;


import it.usr.web.usrbilancio.domain.Indexes;
import it.usr.web.usrbilancio.domain.Keys;
import it.usr.web.usrbilancio.domain.Usrbilancio;
import it.usr.web.usrbilancio.domain.tables.Codice.CodicePath;
import it.usr.web.usrbilancio.domain.tables.Competenza.CompetenzaPath;
import it.usr.web.usrbilancio.domain.tables.records.MovimentiVirtualiRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MovimentiVirtuali extends TableImpl<MovimentiVirtualiRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>usrbilancio.movimenti_virtuali</code>
     */
    public static final MovimentiVirtuali MOVIMENTI_VIRTUALI = new MovimentiVirtuali();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovimentiVirtualiRecord> getRecordType() {
        return MovimentiVirtualiRecord.class;
    }

    /**
     * The column <code>usrbilancio.movimenti_virtuali.id</code>.
     */
    public final TableField<MovimentiVirtualiRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>usrbilancio.movimenti_virtuali.id_competenza</code>.
     */
    public final TableField<MovimentiVirtualiRecord, Integer> ID_COMPETENZA = createField(DSL.name("id_competenza"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>usrbilancio.movimenti_virtuali.id_codice</code>.
     */
    public final TableField<MovimentiVirtualiRecord, Integer> ID_CODICE = createField(DSL.name("id_codice"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>usrbilancio.movimenti_virtuali.id_tipo_documento</code>.
     */
    public final TableField<MovimentiVirtualiRecord, Integer> ID_TIPO_DOCUMENTO = createField(DSL.name("id_tipo_documento"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>usrbilancio.movimenti_virtuali.numero_pagamento</code>.
     */
    public final TableField<MovimentiVirtualiRecord, String> NUMERO_PAGAMENTO = createField(DSL.name("numero_pagamento"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>usrbilancio.movimenti_virtuali.data_pagamento</code>.
     */
    public final TableField<MovimentiVirtualiRecord, LocalDate> DATA_PAGAMENTO = createField(DSL.name("data_pagamento"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>usrbilancio.movimenti_virtuali.nominativo</code>.
     */
    public final TableField<MovimentiVirtualiRecord, String> NOMINATIVO = createField(DSL.name("nominativo"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column
     * <code>usrbilancio.movimenti_virtuali.descrizione_ragioneria</code>.
     */
    public final TableField<MovimentiVirtualiRecord, String> DESCRIZIONE_RAGIONERIA = createField(DSL.name("descrizione_ragioneria"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>usrbilancio.movimenti_virtuali.numero_documento</code>.
     */
    public final TableField<MovimentiVirtualiRecord, String> NUMERO_DOCUMENTO = createField(DSL.name("numero_documento"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>usrbilancio.movimenti_virtuali.data_documento</code>.
     */
    public final TableField<MovimentiVirtualiRecord, LocalDate> DATA_DOCUMENTO = createField(DSL.name("data_documento"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>usrbilancio.movimenti_virtuali.importo</code>.
     */
    public final TableField<MovimentiVirtualiRecord, BigDecimal> IMPORTO = createField(DSL.name("importo"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>usrbilancio.movimenti_virtuali.nomefile</code>.
     */
    public final TableField<MovimentiVirtualiRecord, String> NOMEFILE = createField(DSL.name("nomefile"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>usrbilancio.movimenti_virtuali.nomefile_locale</code>.
     */
    public final TableField<MovimentiVirtualiRecord, String> NOMEFILE_LOCALE = createField(DSL.name("nomefile_locale"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>usrbilancio.movimenti_virtuali.note</code>.
     */
    public final TableField<MovimentiVirtualiRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>usrbilancio.movimenti_virtuali.flag</code>. 0 = nullo
     * 1 = commissario
     */
    public final TableField<MovimentiVirtualiRecord, Integer> FLAG = createField(DSL.name("flag"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "0 = nullo\n1 = commissario");

    /**
     * The column <code>usrbilancio.movimenti_virtuali.versione</code>.
     */
    public final TableField<MovimentiVirtualiRecord, Long> VERSIONE = createField(DSL.name("versione"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    private MovimentiVirtuali(Name alias, Table<MovimentiVirtualiRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MovimentiVirtuali(Name alias, Table<MovimentiVirtualiRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>usrbilancio.movimenti_virtuali</code> table
     * reference
     */
    public MovimentiVirtuali(String alias) {
        this(DSL.name(alias), MOVIMENTI_VIRTUALI);
    }

    /**
     * Create an aliased <code>usrbilancio.movimenti_virtuali</code> table
     * reference
     */
    public MovimentiVirtuali(Name alias) {
        this(alias, MOVIMENTI_VIRTUALI);
    }

    /**
     * Create a <code>usrbilancio.movimenti_virtuali</code> table reference
     */
    public MovimentiVirtuali() {
        this(DSL.name("movimenti_virtuali"), null);
    }

    public <O extends Record> MovimentiVirtuali(Table<O> path, ForeignKey<O, MovimentiVirtualiRecord> childPath, InverseForeignKey<O, MovimentiVirtualiRecord> parentPath) {
        super(path, childPath, parentPath, MOVIMENTI_VIRTUALI);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MovimentiVirtualiPath extends MovimentiVirtuali implements Path<MovimentiVirtualiRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MovimentiVirtualiPath(Table<O> path, ForeignKey<O, MovimentiVirtualiRecord> childPath, InverseForeignKey<O, MovimentiVirtualiRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MovimentiVirtualiPath(Name alias, Table<MovimentiVirtualiRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MovimentiVirtualiPath as(String alias) {
            return new MovimentiVirtualiPath(DSL.name(alias), this);
        }

        @Override
        public MovimentiVirtualiPath as(Name alias) {
            return new MovimentiVirtualiPath(alias, this);
        }

        @Override
        public MovimentiVirtualiPath as(Table<?> alias) {
            return new MovimentiVirtualiPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Usrbilancio.USRBILANCIO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MOVIMENTI_VIRTUALI_FK_PREVENTRATA_CODICE_IDX, Indexes.MOVIMENTI_VIRTUALI_FK_PREVENTRATA_COMPETENZA_IDX);
    }

    @Override
    public Identity<MovimentiVirtualiRecord, Integer> getIdentity() {
        return (Identity<MovimentiVirtualiRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MovimentiVirtualiRecord> getPrimaryKey() {
        return Keys.KEY_MOVIMENTI_VIRTUALI_PRIMARY;
    }

    @Override
    public List<ForeignKey<MovimentiVirtualiRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PREVENTRATA_COMPETENZA, Keys.FK_PREVENTRATA_CODICE);
    }

    private transient CompetenzaPath _competenza;

    /**
     * Get the implicit join path to the <code>usrbilancio.competenza</code>
     * table.
     */
    public CompetenzaPath competenza() {
        if (_competenza == null)
            _competenza = new CompetenzaPath(this, Keys.FK_PREVENTRATA_COMPETENZA, null);

        return _competenza;
    }

    private transient CodicePath _codice;

    /**
     * Get the implicit join path to the <code>usrbilancio.codice</code> table.
     */
    public CodicePath codice() {
        if (_codice == null)
            _codice = new CodicePath(this, Keys.FK_PREVENTRATA_CODICE, null);

        return _codice;
    }

    @Override
    public MovimentiVirtuali as(String alias) {
        return new MovimentiVirtuali(DSL.name(alias), this);
    }

    @Override
    public MovimentiVirtuali as(Name alias) {
        return new MovimentiVirtuali(alias, this);
    }

    @Override
    public MovimentiVirtuali as(Table<?> alias) {
        return new MovimentiVirtuali(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MovimentiVirtuali rename(String name) {
        return new MovimentiVirtuali(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MovimentiVirtuali rename(Name name) {
        return new MovimentiVirtuali(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MovimentiVirtuali rename(Table<?> name) {
        return new MovimentiVirtuali(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovimentiVirtuali where(Condition condition) {
        return new MovimentiVirtuali(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovimentiVirtuali where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovimentiVirtuali where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovimentiVirtuali where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MovimentiVirtuali where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MovimentiVirtuali where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MovimentiVirtuali where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MovimentiVirtuali where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovimentiVirtuali whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovimentiVirtuali whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
