/*
 * This file is generated by jOOQ.
 */
package it.usr.web.usrbilancio.domain.tables;


import it.usr.web.usrbilancio.domain.Keys;
import it.usr.web.usrbilancio.domain.Usrbilancio;
import it.usr.web.usrbilancio.domain.tables.MovimentiVirtuali.MovimentiVirtualiPath;
import it.usr.web.usrbilancio.domain.tables.Ordinativo.OrdinativoPath;
import it.usr.web.usrbilancio.domain.tables.OrdinativoAppoggio.OrdinativoAppoggioPath;
import it.usr.web.usrbilancio.domain.tables.Quietanza.QuietanzaPath;
import it.usr.web.usrbilancio.domain.tables.records.CodiceRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Codice extends TableImpl<CodiceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>usrbilancio.codice</code>
     */
    public static final Codice CODICE = new Codice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodiceRecord> getRecordType() {
        return CodiceRecord.class;
    }

    /**
     * The column <code>usrbilancio.codice.id</code>.
     */
    public final TableField<CodiceRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>usrbilancio.codice.codice</code>.
     */
    public final TableField<CodiceRecord, String> CODICE_ = createField(DSL.name("codice"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>usrbilancio.codice.c01</code>.
     */
    public final TableField<CodiceRecord, String> C01 = createField(DSL.name("c01"), SQLDataType.VARCHAR(8), this, "");

    /**
     * The column <code>usrbilancio.codice.c02</code>.
     */
    public final TableField<CodiceRecord, String> C02 = createField(DSL.name("c02"), SQLDataType.VARCHAR(8), this, "");

    /**
     * The column <code>usrbilancio.codice.c03</code>.
     */
    public final TableField<CodiceRecord, String> C03 = createField(DSL.name("c03"), SQLDataType.VARCHAR(8), this, "");

    /**
     * The column <code>usrbilancio.codice.c04</code>.
     */
    public final TableField<CodiceRecord, String> C04 = createField(DSL.name("c04"), SQLDataType.VARCHAR(8), this, "");

    /**
     * The column <code>usrbilancio.codice.c05</code>.
     */
    public final TableField<CodiceRecord, String> C05 = createField(DSL.name("c05"), SQLDataType.VARCHAR(8), this, "");

    /**
     * The column <code>usrbilancio.codice.ordinanza</code>.
     */
    public final TableField<CodiceRecord, String> ORDINANZA = createField(DSL.name("ordinanza"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>usrbilancio.codice.descrizione</code>.
     */
    public final TableField<CodiceRecord, String> DESCRIZIONE = createField(DSL.name("descrizione"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>usrbilancio.codice.note</code>.
     */
    public final TableField<CodiceRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.VARCHAR(8192), this, "");

    /**
     * The column <code>usrbilancio.codice.ente_diocesi</code>.
     */
    public final TableField<CodiceRecord, String> ENTE_DIOCESI = createField(DSL.name("ente_diocesi"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>usrbilancio.codice.provincia</code>.
     */
    public final TableField<CodiceRecord, String> PROVINCIA = createField(DSL.name("provincia"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>usrbilancio.codice.id_intervento</code>.
     */
    public final TableField<CodiceRecord, String> ID_INTERVENTO = createField(DSL.name("id_intervento"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>usrbilancio.codice.categoria</code>.
     */
    public final TableField<CodiceRecord, String> CATEGORIA = createField(DSL.name("categoria"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>usrbilancio.codice.importo_fin_comm</code>.
     */
    public final TableField<CodiceRecord, BigDecimal> IMPORTO_FIN_COMM = createField(DSL.name("importo_fin_comm"), SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>usrbilancio.codice.importo_definitivo</code>.
     */
    public final TableField<CodiceRecord, BigDecimal> IMPORTO_DEFINITIVO = createField(DSL.name("importo_definitivo"), SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>usrbilancio.codice.importo_cofinanziamento</code>.
     */
    public final TableField<CodiceRecord, BigDecimal> IMPORTO_COFINANZIAMENTO = createField(DSL.name("importo_cofinanziamento"), SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>usrbilancio.codice.importo_contotermico</code>.
     */
    public final TableField<CodiceRecord, BigDecimal> IMPORTO_CONTOTERMICO = createField(DSL.name("importo_contotermico"), SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>usrbilancio.codice.concluso</code>.
     */
    public final TableField<CodiceRecord, Boolean> CONCLUSO = createField(DSL.name("concluso"), SQLDataType.BIT, this, "");

    private Codice(Name alias, Table<CodiceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Codice(Name alias, Table<CodiceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>usrbilancio.codice</code> table reference
     */
    public Codice(String alias) {
        this(DSL.name(alias), CODICE);
    }

    /**
     * Create an aliased <code>usrbilancio.codice</code> table reference
     */
    public Codice(Name alias) {
        this(alias, CODICE);
    }

    /**
     * Create a <code>usrbilancio.codice</code> table reference
     */
    public Codice() {
        this(DSL.name("codice"), null);
    }

    public <O extends Record> Codice(Table<O> path, ForeignKey<O, CodiceRecord> childPath, InverseForeignKey<O, CodiceRecord> parentPath) {
        super(path, childPath, parentPath, CODICE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CodicePath extends Codice implements Path<CodiceRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CodicePath(Table<O> path, ForeignKey<O, CodiceRecord> childPath, InverseForeignKey<O, CodiceRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CodicePath(Name alias, Table<CodiceRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CodicePath as(String alias) {
            return new CodicePath(DSL.name(alias), this);
        }

        @Override
        public CodicePath as(Name alias) {
            return new CodicePath(alias, this);
        }

        @Override
        public CodicePath as(Table<?> alias) {
            return new CodicePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Usrbilancio.USRBILANCIO;
    }

    @Override
    public Identity<CodiceRecord, Integer> getIdentity() {
        return (Identity<CodiceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CodiceRecord> getPrimaryKey() {
        return Keys.KEY_CODICE_PRIMARY;
    }

    @Override
    public List<UniqueKey<CodiceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CODICE_CODICE_CXX_UNQ);
    }

    private transient OrdinativoPath _ordinativo;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.ordinativo</code> table
     */
    public OrdinativoPath ordinativo() {
        if (_ordinativo == null)
            _ordinativo = new OrdinativoPath(this, null, Keys.FK_ORDINATIVO_CODICE.getInverseKey());

        return _ordinativo;
    }

    private transient OrdinativoAppoggioPath _ordinativoAppoggio;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.ordinativo_appoggio</code> table
     */
    public OrdinativoAppoggioPath ordinativoAppoggio() {
        if (_ordinativoAppoggio == null)
            _ordinativoAppoggio = new OrdinativoAppoggioPath(this, null, Keys.FK_ORDINATIVOAPP_CODICE.getInverseKey());

        return _ordinativoAppoggio;
    }

    private transient MovimentiVirtualiPath _movimentiVirtuali;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.movimenti_virtuali</code> table
     */
    public MovimentiVirtualiPath movimentiVirtuali() {
        if (_movimentiVirtuali == null)
            _movimentiVirtuali = new MovimentiVirtualiPath(this, null, Keys.FK_PREVENTRATA_CODICE.getInverseKey());

        return _movimentiVirtuali;
    }

    private transient QuietanzaPath _quietanza;

    /**
     * Get the implicit to-many join path to the
     * <code>usrbilancio.quietanza</code> table
     */
    public QuietanzaPath quietanza() {
        if (_quietanza == null)
            _quietanza = new QuietanzaPath(this, null, Keys.FK_QUIETANZA_CODICE.getInverseKey());

        return _quietanza;
    }

    @Override
    public Codice as(String alias) {
        return new Codice(DSL.name(alias), this);
    }

    @Override
    public Codice as(Name alias) {
        return new Codice(alias, this);
    }

    @Override
    public Codice as(Table<?> alias) {
        return new Codice(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Codice rename(String name) {
        return new Codice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Codice rename(Name name) {
        return new Codice(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Codice rename(Table<?> name) {
        return new Codice(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Codice where(Condition condition) {
        return new Codice(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Codice where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Codice where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Codice where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Codice where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Codice where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Codice where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Codice where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Codice whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Codice whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
