/*
 * This file is generated by jOOQ.
 */
package it.usr.web.usrbilancio.domain.tables;


import it.usr.web.usrbilancio.domain.Indexes;
import it.usr.web.usrbilancio.domain.Keys;
import it.usr.web.usrbilancio.domain.Usrbilancio;
import it.usr.web.usrbilancio.domain.tables.Ordinativo.OrdinativoPath;
import it.usr.web.usrbilancio.domain.tables.records.AllegatoRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Allegato extends TableImpl<AllegatoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>usrbilancio.allegato</code>
     */
    public static final Allegato ALLEGATO = new Allegato();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AllegatoRecord> getRecordType() {
        return AllegatoRecord.class;
    }

    /**
     * The column <code>usrbilancio.allegato.id</code>.
     */
    public final TableField<AllegatoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>usrbilancio.allegato.id_ordinativo</code>.
     */
    public final TableField<AllegatoRecord, Integer> ID_ORDINATIVO = createField(DSL.name("id_ordinativo"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>usrbilancio.allegato.gruppo</code>.
     */
    public final TableField<AllegatoRecord, String> GRUPPO = createField(DSL.name("gruppo"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>usrbilancio.allegato.nomefile</code>.
     */
    public final TableField<AllegatoRecord, String> NOMEFILE = createField(DSL.name("nomefile"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>usrbilancio.allegato.nomefile_locale</code>.
     */
    public final TableField<AllegatoRecord, String> NOMEFILE_LOCALE = createField(DSL.name("nomefile_locale"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>usrbilancio.allegato.descrizione</code>.
     */
    public final TableField<AllegatoRecord, String> DESCRIZIONE = createField(DSL.name("descrizione"), SQLDataType.VARCHAR(255), this, "");

    private Allegato(Name alias, Table<AllegatoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Allegato(Name alias, Table<AllegatoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>usrbilancio.allegato</code> table reference
     */
    public Allegato(String alias) {
        this(DSL.name(alias), ALLEGATO);
    }

    /**
     * Create an aliased <code>usrbilancio.allegato</code> table reference
     */
    public Allegato(Name alias) {
        this(alias, ALLEGATO);
    }

    /**
     * Create a <code>usrbilancio.allegato</code> table reference
     */
    public Allegato() {
        this(DSL.name("allegato"), null);
    }

    public <O extends Record> Allegato(Table<O> path, ForeignKey<O, AllegatoRecord> childPath, InverseForeignKey<O, AllegatoRecord> parentPath) {
        super(path, childPath, parentPath, ALLEGATO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AllegatoPath extends Allegato implements Path<AllegatoRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AllegatoPath(Table<O> path, ForeignKey<O, AllegatoRecord> childPath, InverseForeignKey<O, AllegatoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AllegatoPath(Name alias, Table<AllegatoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AllegatoPath as(String alias) {
            return new AllegatoPath(DSL.name(alias), this);
        }

        @Override
        public AllegatoPath as(Name alias) {
            return new AllegatoPath(alias, this);
        }

        @Override
        public AllegatoPath as(Table<?> alias) {
            return new AllegatoPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Usrbilancio.USRBILANCIO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ALLEGATO_FK_ALLEGATO_ORDINATIVO_IDX);
    }

    @Override
    public Identity<AllegatoRecord, Integer> getIdentity() {
        return (Identity<AllegatoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AllegatoRecord> getPrimaryKey() {
        return Keys.KEY_ALLEGATO_PRIMARY;
    }

    @Override
    public List<ForeignKey<AllegatoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ALLEGATO_ORDINATIVO);
    }

    private transient OrdinativoPath _ordinativo;

    /**
     * Get the implicit join path to the <code>usrbilancio.ordinativo</code>
     * table.
     */
    public OrdinativoPath ordinativo() {
        if (_ordinativo == null)
            _ordinativo = new OrdinativoPath(this, Keys.FK_ALLEGATO_ORDINATIVO, null);

        return _ordinativo;
    }

    @Override
    public Allegato as(String alias) {
        return new Allegato(DSL.name(alias), this);
    }

    @Override
    public Allegato as(Name alias) {
        return new Allegato(alias, this);
    }

    @Override
    public Allegato as(Table<?> alias) {
        return new Allegato(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Allegato rename(String name) {
        return new Allegato(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Allegato rename(Name name) {
        return new Allegato(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Allegato rename(Table<?> name) {
        return new Allegato(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Allegato where(Condition condition) {
        return new Allegato(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Allegato where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Allegato where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Allegato where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Allegato where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Allegato where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Allegato where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Allegato where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Allegato whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Allegato whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
